<imageModule category="Image" creation="2014-06-16 11:19:42.517 UTC" deleted="false" description="Apache2/PHP layer. Includes a simple read/write app running on port 80" isBase="false" isLatestVersion="true" lastModified="2016-02-23 03:13:00.740 UTC" loginUser="ubuntu" logoLink="https://nuv.la/images/modules-logos/php.svg" moduleReferenceUri="module/examples/images/ubuntu-12.04" parentUri="module/apps/LAMP" platform="ubuntu" shortName="apache-php" version="3025">
   <authz groupCreateChildren="false" groupDelete="false" groupGet="true" groupPost="false" groupPut="true" inheritedGroupMembers="true" owner="sixsq" ownerCreateChildren="true" ownerDelete="true" ownerGet="true" ownerPost="true" ownerPut="true" publicCreateChildren="false" publicDelete="false" publicGet="true" publicPost="false" publicPut="false">
      <groupMembers>
         </groupMembers>
   </authz>
   <commit author="sixsq">
      <comment>Initial version of this module</comment>
   </commit>
   <cloudNames length="0">
      </cloudNames>
   <runs count="0" limit="20" offset="0" totalCount="0" />
   <targets>
      <target name="onvmadd" />
      <target name="report" />
      <target name="onvmremove" />
      <target name="execute">#!/bin/sh -xe


#cat &gt;&gt; /etc/apache2/httpd.conf &lt;&lt; 'EOF'
#LoadModule php5_module modules/libphp5.so
#
#&lt;FilesMatch \.php$&gt;
#    SetHandler application/x-httpd-php
#&lt;/FilesMatch&gt;
#EOF


service apache2 stop
sed -i -e 's/;   extension=msql.so/extension=mongo.so/' /etc/php5/apache2/php.ini

# wait for the cluster to be ready
ss-display "Waiting for the mongo cluster to be ready"
ss-get --timeout 3600 isReplicaSetReady

# TODO remove when replicaSet is guaranteed to be ready at the time of setting isReplicaSetReady
#sleep 30

# get input parameters
replicaSetConf=$(ss-get --timeout 3600 replicaSetConf)
id=$(ss-get id)

replicaset=$(echo $replicaSetConf | sed 's/,/:27017,/g' | sed 's/$/:27017/')

# create php page to read entries
ss-display "Creating php pages"
cat &gt; /tmp/mongoRead.php &lt;&lt; 'EOF'
&lt;?php
$connection = new MongoClient("mongodb://__REPLICASET__/?replicaSet=rs0");
$db = $connection-&gt;test;
$collection = $db-&gt;testData;
$result = $db-&gt;command(array("isMaster" =&gt; 1));
$mongoserver = $result["me"];
$db-&gt;setReadPreference(MongoClient::RP_PRIMARY_PREFERRED);
$writers = array();
for ($i = 1; $i &lt;= $collection-&gt;count(); $i++) {
    $writers["writer-" . str_pad($i,2,"0", STR_PAD_LEFT)] = $collection-&gt;count(array('writer' =&gt; $i));
}
$arr = array();
$arr["db"] = $mongoserver;
$arr["writers"] = $writers;
header('Content-Type: application/json');
echo $_GET['callback'] . '('.json_encode($arr).')';
?&gt;
EOF

sed -i -e 's/__REPLICASET__/'$replicaset'/' /tmp/mongoRead.php

# create php page to write (insert entries)
cat &gt; /tmp/mongoWrite.php &lt;&lt; 'EOF'
&lt;?php
$connection = new MongoClient("mongodb://__REPLICASET__/?replicaSet=rs0");
$db = $connection-&gt;test;
$collection = $db-&gt;testData;
$result = $db-&gt;command(array("isMaster" =&gt; 1));
$mongoserver = $result["me"];
$doc = array(
    "x" =&gt; $_REQUEST['value'],
    "writer" =&gt; __ID__,
    "mongo" =&gt; $mongoserver
);
$collection-&gt;insert($doc, array("w" =&gt; 2));
header('Content-Type: application/json');
echo $_GET['callback'] . '('.json_encode(array("db" =&gt; $mongoserver)).')';
?&gt;
EOF

sed -i -e 's/__REPLICASET__/'$replicaset'/' /tmp/mongoWrite.php
sed -i -e 's/__ID__/'$id'/' /tmp/mongoWrite.php

cp /tmp/mongo*php /var/www/

ss-display "Installing Lamp++ UI"

cd /var/www
wget https://github.com/slipstream/slipstream-lamp-ui/releases/download/1.1/lamp-ui-1.1.tgz
tar zxvf lamp-ui-1.1.tgz

service apache2 start
ss-set ready true
URL=http://$(ss-get hostname)
ss-set url.service $URL
ss-display "ApachePHP ready"
</target>
   </targets>
   <packages />
   <prerecipe />
   <recipe>#!/bin/bash -xe

function ss-display {
    $(which ss-display) "$1" || echo "$1"
}

ss-display "Updating Ubuntu mirror location"
cat &gt;&gt; /tmp/mirrors.txt &lt;&lt; 'EOF'
deb mirror://mirrors.ubuntu.com/mirrors.txt precise main restricted universe multiverse
deb mirror://mirrors.ubuntu.com/mirrors.txt precise-updates main restricted universe multiverse
deb mirror://mirrors.ubuntu.com/mirrors.txt precise-backports main restricted universe multiverse
deb mirror://mirrors.ubuntu.com/mirrors.txt precise-security main restricted universe multiverse
EOF

cat /tmp/mirrors.txt | cat - /etc/apt/sources.list &gt; /tmp/sources.list
cp -f /tmp/sources.list  /etc/apt/sources.list

# increasing the apt cache size so it works
echo "APT::Cache-Limit \"50331648\"\;" &gt;&gt;  /etc/apt/apt.conf.d/70debconf



# Install apache and php
apt-get update -y
apt-get install -y apache2
apt-get install -y make
apt-get install -y php5-common libapache2-mod-php5 php5-cli php5-dev php-pear
apt-get install -y expect



# Install php driver for mongo
#/usr/bin/expect -c 'spawn pear install -f pecl/mongo ; expect "Build with Cyrus SASL (MongoDB Enterprise Authentication) support?" ; send -- "\r" ; expect "Build process completed successfully"; expect eof'
yes '' | pecl install -f mongo</recipe>
   <cloudImageIdentifiers />
   <parameters>
      <entry>
         <string>hostname</string>
         <parameter category="Output" description="hostname/ip of the image" isSet="false" mandatory="true" name="hostname" order="0" order_="0" readonly="false" type="String" />
      </entry>
      <entry>
         <string>extra.disk.volatile</string>
         <parameter category="Cloud" description="Volatile extra disk in GB" isSet="true" mandatory="true" name="extra.disk.volatile" order="0" order_="0" readonly="false" type="String">
            <value>5</value>
            <defaultValue>5</defaultValue>
         </parameter>
      </entry>
      <entry>
         <string>instanceid</string>
         <parameter category="Output" description="Cloud instance id" isSet="false" mandatory="true" name="instanceid" order="0" order_="0" readonly="false" type="String" />
      </entry>
      <entry>
         <string>network</string>
         <parameter category="Cloud" description="Network type" isSet="true" mandatory="true" name="network" order="0" order_="0" readonly="false" type="Enum">
            <enumValues length="2">
               <string>Public</string>
               <string>Private</string>
            </enumValues>
            <value>Public</value>
            <defaultValue>Public</defaultValue>
         </parameter>
      </entry>
      <entry>
         <string>ready</string>
         <parameter category="Output" description="Web layer ready?" isSet="false" mandatory="false" name="ready" order="0" order_="0" readonly="false" type="String" />
      </entry>
      <entry>
         <string>replicaSetConf</string>
         <parameter category="Input" description="Database cluster configuration" isSet="false" mandatory="false" name="replicaSetConf" order="0" order_="0" readonly="false" type="String" />
      </entry>
      <entry>
         <string>isReplicaSetReady</string>
         <parameter category="Input" description="Is the database fully ready (including replica cluster)?" isSet="false" mandatory="false" name="isReplicaSetReady" order="0" order_="0" readonly="false" type="String" />
      </entry>
      </parameters>
   <notes length="0" />
</imageModule>