<imageModule category="Image" creation="2014-06-16 11:15:38.633 UTC" deleted="false" description="MongoDB image for cluster deployment. Sets-up by default a majority replication scheme." isBase="false" isLatestVersion="true" lastModified="2015-07-01 21:11:34.961 UTC" loginUser="ubuntu" logoLink="https://slipstream.sixsq.com/images/modules-logos/mongodb.svg" moduleReferenceUri="module/examples/images/ubuntu-12.04" parentUri="module/apps/MongoDB" platform="ubuntu" shortName="mongodb" version="1758">
   <authz groupCreateChildren="false" groupDelete="false" groupGet="true" groupPost="false" groupPut="true" inheritedGroupMembers="true" owner="sixsq" ownerCreateChildren="true" ownerDelete="true" ownerGet="true" ownerPost="true" ownerPut="true" publicCreateChildren="false" publicDelete="false" publicGet="true" publicPost="false" publicPut="false">
      <groupMembers>
         </groupMembers>
   </authz>
   <commit author="sixsq">
      <comment>Initial version of this module</comment>
   </commit>
   <cloudNames length="12">
      </cloudNames>
   <runs count="0" limit="20" offset="0" totalCount="0" />
   <targets>
      <target name="report" />
      <target name="execute">#!/bin/bash -xe


function waitForReplicaSet(){

retries=100
MONGO_REPLICA_RESULT="NOTREADY"
while [[ $MONGO_REPLICA_RESULT != 'READY' ]] &amp;&amp; [[ $retries -ne 0 ]]
do
MONGO_REPLICA_RESULT=$(mongo --quiet /tmp/replicaInit.js | awk 'BEGIN{FS=":"}{print $1;}')
ss-display "Got response from replicaSet: $MONGO_REPLICA_RESULT."
sleep 5
if [[  $MONGO_REPLICA_RESULT != 'READY' ]]
then
ss-display "Sleeping more $retries time..."
fi
(( retries-- ))


done

return 0;
}


#Initialize pyMongo
function pymongo_instal(){
# Install easy_install
wget https://bitbucket.org/pypa/setuptools/raw/0.7.7/ez_setup.py -O - | python
# Install python driver for mongo
/usr/local/bin/easy_install pymongo
}





# stop the DB, provide the proper configuration file: different for the master, different for the slaves or choose a replica set node belongs to 
# make sure the server is accessible from the other nodes
mkdir -p /data/mongodb
chown -R mongodb:mongodb /data/mongodb

# journaling space &gt;= RAM in mongo
mkdir -p /data/mongodb/log
chown -R mongodb:mongodb  /data/mongodb/log

# create the config file and start the service


cat &gt;   /etc/mongodb.conf  &lt;&lt; 'EOF'

# mongodb.conf

smallfiles=true

# Where to store the data.

# Note: if you run mongodb as a non-root user (recommended) you may
# need to create and set permissions for this directory manually,
# e.g., if the parent directory isn't mutable by the mongodb user.
dbpath=/data/mongodb

#daemonize 
fork=true

#where to log
logpath=/data/mongodb/mongodb.log

logappend=true
quiet = false

#port = 27017

#replica set
replSet = rs0

# Disables write-ahead journaling
# nojournal = true

# Enables periodic logging of CPU utilization and I/O wait
cpu = true

# Turn on/off security.  Off is currently the default
#noauth = true
#auth = true

# Verbose logging output.
verbose = true


EOF


# When logging-in, we need to set local
# This is not required when SlipStream executes the script
export LC_ALL=C

#starts the server as a daemon
#mongod --config /etc/mongodb.conf
service mongodb start
sleep 5

ss-set isMongoReady true

ss-display "Mongo server is ready to use"

# for each of the nodes, initialize replica set by adding slaves to the primary.
# The primary is a node with an "id" 1. 
# it waits until all other instances are propagated until all "ids" have been
# processed


# ::: Recover Mongo info
MONGO_ID=$(ss-get id)

MONGO_NODENAME=$(ss-get nodename)
MONGO_IDS=$(ss-get ids)

if [ "$MONGO_ID" = "1" ]
then
# gather info from all the other nodes and initialize the replica set

cat &gt; /tmp/replicaInit.js &lt;&lt; 'EOF'
var statusInit = rs.initiate({_id: "rs0", members: [
EOF

for i in ${MONGO_IDS//,/ };
do   
ss-display "Waiting for ${i}th node: ${MONGO_NODENAME}.${i}:hostname"
WN_IP=$(ss-get --timeout 360 ${MONGO_NODENAME}.${i}:hostname)
WN_READINESS=$(ss-get --timeout 600 ${MONGO_NODENAME}.${i}:isMongoReady)
WN_HOSTNAME=${MONGO_NODENAME}${i}

WN_HOSTNAMES="$WN_HOSTNAMES,$WN_IP"

echo "{_id: ${i}, host: \"${WN_IP}\" }, " &gt;&gt;  /tmp/replicaInit.js

done

#remove last comma
sed -i '$s/,$//' /tmp/replicaInit.js
WN_HOSTNAMES=$(echo $WN_HOSTNAMES | sed -e '$s/^,//')

#close the replica definition
cat &gt;&gt; /tmp/replicaInit.js &lt;&lt; 'EOF'
]});


var s=rs.status();

var numChecks = 0;
var replicaSetReady = true;

for (i in s.members)
{
var rsstate = s.members[i].state;
switch(rsstate) {
case 1:
case 2: //primary or secondary, ok, just leave
//print("Member "+ s.members[i].name + " is ready and is " + s.members[i].stateStr);
break;
case 0:
case 3:
case 5: // still initializing or recovering, increase the counter, wait and repeat
//print("Member "+ s.members[i].name + " is still initializing. Waiting for current status: "+s.members[i].stateStr);
numChecks++;
s=rs.status();
replicaSetReady=false;
//print("Got replicaSet status...");
//print("NOTREADY:"+"Member "+ s.members[i].name + " is still initializing. Waiting for current status: "+s.members[i].stateStr)


break;
default:
//print("ERROR:Severe error found, cannot continue. "+ s.members[i].name + " is :" + s.members[i].stateStr);
//error, just exit with error
replicaSetReady = false;
break;
}
}
//print("config : " + rs.conf());
if(replicaSetReady)print("READY:!"); else {print("NOTREADY")};

EOF

# create a replica set:

waitForReplicaSet
sleep 60
cat &gt;&gt; reconfigureReplica.js &lt;&lt; 'EOF'
cfg = rs.conf();
cfg.settings = {};
cfg.settings.getLastErrorDefaults = {w: "majority"};
var statusReConfig  = rs.reconfig(cfg);
EOF

mongo reconfigureReplica.js

waitForReplicaSet

# This comes from the fact Mongo lies about the replica state, it seems..
ss-display "Ensuring replica set is ready..."
sleep 90

MONGO_STATUS=$(mongo --quiet --eval "printjson(rs.status())")
MONGO_REPLICA_STATUS=$(mongo --eval "printjson(rs.conf())")
ss-display "Mongo status is: $MONGO_STATUS " 
ss-set replicaSetConf "\"$WN_HOSTNAMES\""
ss-set isReplicaSetReady true
ss-display "All set from the Primary node $MONGO_REPLICA_STATUS"
fi

</target>
      <target name="onvmremove" />
      <target name="onvmadd" />
   </targets>
   <packages />
   <prerecipe />
   <recipe>#!/bin/bash -xe

function ss-display {
    $(which ss-display) "$1" || echo "$1"
}

#Initialize pyMongo
function pymongo_instal(){
# Install easy_install
wget https://bitbucket.org/pypa/setuptools/raw/0.7.7/ez_setup.py -O - | python
# Install python driver for mongo
/usr/local/bin/easy_install pymongo
}


# create a data filesystem for DB
ss-display "Updating Ubuntu mirror location"
cat &gt;&gt; /tmp/mirrors.txt &lt;&lt; 'EOF'
deb mirror://mirrors.ubuntu.com/mirrors.txt precise main restricted universe multiverse
deb mirror://mirrors.ubuntu.com/mirrors.txt precise-updates main restricted universe multiverse
deb mirror://mirrors.ubuntu.com/mirrors.txt precise-backports main restricted universe multiverse
deb mirror://mirrors.ubuntu.com/mirrors.txt precise-security main restricted universe multiverse
EOF

cat /tmp/mirrors.txt | cat - /etc/apt/sources.list &gt; /tmp/sources.list
cp -f /tmp/sources.list  /etc/apt/sources.list

#increasing the apt cache size so it works
echo "APT::Cache-Limit \"50331648\"\;" &gt;&gt;  /etc/apt/apt.conf.d/70debconf 

#install mongo stuff
apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10

#Create a /etc/apt/sources.list.d/10gen.list file using the following command.

echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee /etc/apt/sources.list.d/10gen.list


#Install Packages
#Issue the following command to install the latest stable version of MongoDB:
echo "Updating repos..."
apt-get update




#ss-display "Installing XFS tools"
#apt-get -y install xfsprogs

#ss-display "Getting info about the disk location/name based on the static drive size"

#EXTRA_DISK_SIZE_GB=$(ss-get extra.disk.volatile)
#EXTRA_DISK_SIZE_BYTES=$(($EXTRA_DISK_SIZE_GB*1024*1024))
#DATA_PARTITION=$(sfdisk -uM -sdqL 2&gt;/dev/null |  awk -- 'BEGIN { FS=":"} $2 ~ '$EXTRA_DISK_SIZE_BYTES' { print $1;}')

#ss-display "Creating data partitions"
#parted -s -a optimal -- $DATA_PARTITION mklabel gpt
#ss-display "Checking if there are any existing partitions and remove them"
#SPURIOS_PARTITIONS=$(parted -sm $DATA_PARTITION print | awk -- 'BEGIN{FS=":"} $1 ~ /[0-9]+/ {to_rem=to_rem" " $1}END{print to_rem;}')
#if [[ $SPURIOS_PARTITIONS ]] ; then 
#parted -s $DATA_PARTITION rm $SPURIOS_PARTITIONS
#fi
#parted -s -a optimal -- $DATA_PARTITION  unit compact mkpart  xfs "1" "-1" ;
#mkfs.xfs -q -f $DATA_PARTITION 
mkdir -p /data
#mount $DATA_PARTITION -o nobarrier,noatime,nodiratime,logbsize=262144,logbufs=0,allocsize=64M /data


#make some space for packages as the var is very small normally
ss-display "Moving reposiutory files to the new partition and linking it to /var."
mv -i /var/cache/apt /data
ln -s /data/apt /var/cache/apt


#ss-display "Setting mongoDB software on a disk $DATA_PARTITION"
ss-display "Setting mongoDB software on /data"


sudo apt-get -y install mongodb-10gen 
service mongodb stop || true</recipe>
   <cloudImageIdentifiers />
   <parameters>
      <entry>
         <string>isMongoReady</string>
         <parameter category="Output" description="MongoDB ready to serve data?" isSet="false" mandatory="false" name="isMongoReady" order="0" order_="0" readonly="false" type="String" />
      </entry>
      <entry>
         <string>network</string>
         <parameter category="Cloud" description="Network type" isSet="true" mandatory="true" name="network" order="0" order_="0" readonly="false" type="Enum">
            <enumValues length="2">
               <string>Public</string>
               <string>Private</string>
            </enumValues>
            <value>Public</value>
            <defaultValue>Public</defaultValue>
         </parameter>
      </entry>
      <entry>
         <string>hostname</string>
         <parameter category="Output" description="hostname/ip of the image" isSet="false" mandatory="true" name="hostname" order="0" order_="0" readonly="false" type="String" />
      </entry>
      <entry>
         <string>replicaSetConf</string>
         <parameter category="Output" description="List of replica hostnames" isSet="false" mandatory="false" name="replicaSetConf" order="0" order_="0" readonly="false" type="String" />
      </entry>
      <entry>
         <string>extra.disk.volatile</string>
         <parameter category="Cloud" description="Volatile extra disk in GB" isSet="false" mandatory="true" name="extra.disk.volatile" order="0" order_="0" readonly="false" type="String" />
      </entry>
      <entry>
         <string>isReplicaSetReady</string>
         <parameter category="Output" description="MongoDB replica set ready?" isSet="false" mandatory="false" name="isReplicaSetReady" order="0" order_="0" readonly="false" type="String" />
      </entry>
      <entry>
         <string>instanceid</string>
         <parameter category="Output" description="Cloud instance id" isSet="false" mandatory="true" name="instanceid" order="0" order_="0" readonly="false" type="String" />
      </entry>
      </parameters>
   <notes length="0" />
</imageModule>